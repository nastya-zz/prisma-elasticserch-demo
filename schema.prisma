model Advertisement {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  images      String[]
  isNew       Boolean @default(false)
  //category todo field

  user   User @relation(fields: [userId], references: [id])
  userId Int

  isArchive  Boolean             @default(false)
  isActive   Boolean             @default(true)
  canCall    Boolean             @default(true)
  canMessage Boolean             @default(true)
  chats      AdvertisementChat[]

  views          Int
  uniqueWatchers Int[]

  coordinateX String
  coordinateY String
  address     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Message   Message? @relation(fields: [messageId], references: [id])
  messageId String?

  @@map("advertisement")
}

model AdvertisementMessage {
  id          String            @id @default(uuid())
  message     String
  user        User              @relation(fields: [usreId], references: [id])
  usreId      Int
  chat        AdvertisementChat @relation(fields: [chatId], references: [id])
  chatId      String
  readUserIds Int[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("advertisement_message")
}

model AdvertisementChat {
  id                   String                 @id @default(uuid())
  name                 String
  advertisement        Advertisement          @relation(fields: [advertisementId], references: [id])
  advertisementId      Int
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @default(now()) @updatedAt
  messages             Message[]
  AdvertisementMessage AdvertisementMessage[]
  User                 User?                  @relation(fields: [userId], references: [id])
  userId               Int?

  @@map("advertisement_chat")
}model Message {
  id                  String             @id @default(uuid())
  message             String
  author              User               @relation(fields: [authorId], references: [id])
  authorId            Int
  advertisementChat   AdvertisementChat? @relation(fields: [advertisementChatId], references: [id])
  advertisementChatId String?

  readUserIds Int[]

  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now()) @updatedAt
  Chat          Chat?           @relation(fields: [chatId], references: [id])
  chatId        String?
  Advertisement Advertisement[]

  @@map("message")
}

model Chat {
  id        String    @id @default(uuid())
  name      String
  author    User      @relation(fields: [authorId], references: [id])
  authorId  Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  public    Boolean   @default(false)
  guestIds  Int[]
  Message   Message[]

  @@map("chat")
}

model Post {
  id       Int     @id @default(autoincrement())
  title    String
  content  String
  show     Boolean
  author   User    @relation(fields: [authorId], references: [id])
  authorId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("post")
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
generator prismaClassGenerator {
    provider = "prisma-class-generator"
    dryRun = false
    output = "./src/generated/prisma-class"
    useSwagger = true
    makeIndexFile = false
    seperateRelationFields = true
}
model User {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  name                  String
  posts                 Post[]
  chats                 Chat[]
  password              String
//  address               Address?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt
  isActive              Boolean                @default(true)
  advertisements        Advertisement[]
  advertisementChats    AdvertisementChat[]
  advertisementMessages AdvertisementMessage[]
  Message               Message[]

  @@unique([email, id])
  @@map("user")
}
//
//model Address {
//  id      Int     @id @default(autoincrement())
//  show    Boolean @default(false)
//  address String
//  user    User    @relation(fields: [userId], references: [id])
//  userId  Int     @unique
//
//  /// @DtoCreateOptional
//  coordinateX   String?
//  coordinateY   String?
//  Advertisement Advertisement[]
//
//  @@unique([id, userId])
//  @@map("address")
//}