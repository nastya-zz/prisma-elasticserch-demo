model Advertisement {
  id          Int     @id @default(autoincrement())
  title       String
  description String
  images      String[]
  isNew       Boolean @default(false)
  //category todo field

  user   User @relation(fields: [userId], references: [id])
  userId Int

  isArchive  Boolean             @default(false)
  isActive   Boolean             @default(true)
  canCall    Boolean             @default(true)
  canMessage Boolean             @default(true)
  chats      Chat[]

  views          Int
  uniqueWatchers Int[]

  coordinateX String
  coordinateY String
  address     String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  Message   Message? @relation(fields: [messageId], references: [id])
  messageId String?

  @@map("advertisement")
}
model Message {
  id       String @id @default(uuid())
  message  String
  author   User   @relation(fields: [authorId], references: [id])
  authorId Int

  readUserIds Int[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  Chat          Chat?           @relation(fields: [chatId], references: [id])
  chatId        String?
  Advertisement Advertisement[]

  @@map("message")
}

model Chat {
  id              String        @id @default(uuid())
  buyer           User          @relation(fields: [buyerId], references: [id])
  buyerId         Int
  sellerId        Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @default(now()) @updatedAt
  public          Boolean       @default(false)
  advertisementId Int
  Message         Message[]
  Advertisement   Advertisement @relation(fields: [advertisementId], references: [id])

  @@map("chat")
}

model Post {
  id       Int     @id @default(autoincrement())
  title    String
  content  String
  show     Boolean
  author   User    @relation(fields: [authorId], references: [id])
  authorId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("post")
}
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}
generator prismaClassGenerator {
    provider = "prisma-class-generator"
    dryRun = false
    output = "./src/generated/prisma-class"
    useSwagger = true
    makeIndexFile = false
    seperateRelationFields = true
}
model User {
  id                    Int                    @id @default(autoincrement())
  email                 String                 @unique
  name                  String
  posts                 Post[]
  password              String
//  address               Address?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @default(now()) @updatedAt
  isActive              Boolean                @default(true)
  advertisements        Advertisement[]
  chats                 Chat[]
  Message               Message[]

  @@unique([email, id])
  @@map("user")
}
//
//model Address {
//  id      Int     @id @default(autoincrement())
//  show    Boolean @default(false)
//  address String
//  user    User    @relation(fields: [userId], references: [id])
//  userId  Int     @unique
//
//  /// @DtoCreateOptional
//  coordinateX   String?
//  coordinateY   String?
//  Advertisement Advertisement[]
//
//  @@unique([id, userId])
//  @@map("address")
//}